/*
 * (c) Copyright 2019 Xilinx, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
#include "zlib.hpp"
#include <fstream>
#include <vector>
#include "cmdlineparser.h"
#include "license.h" 
#include <regex>
#include <iterator>
#include <string>
#include <stdlib.h>  
#include <libgen.h>
void xil_compress_top(std::string& compress_mod, std::string& single_bin, std::string& compress_out) {
    

    std::ifstream inFile(compress_mod.c_str(), std::ifstream::binary);
    if (!inFile) {
        std::cout << "Unable to open file \'" << compress_mod << "\'" << endl;
        exit(1);
    }
    uint32_t input_size = get_file_size(inFile);

    uint32_t compress_block_size;
    if (input_size <= 1048576*3 ) 
        compress_block_size = 32;
    else if(input_size > 1024*1023*3 && input_size <= 1024*1024*6)
        compress_block_size = 64;
    else if(input_size > 1048576*6 && input_size <= 12*1024*1024)//3-240MB
        compress_block_size = 128;
    else if(input_size > 1048576*12 && input_size < 24*1024*1024)//3-240MB
        compress_block_size = 128;
    else if(input_size > 1048576*24 && input_size < 160*1024*1024)//3-240MB
        compress_block_size = 128;
    else
        compress_block_size = 1024;


    std::string lz_compress_in = compress_mod;
    std::string lz_compress_out = compress_out;
//    lz_compress_out = lz_compress_out + ".zlib";

    // Xilinx ZLIB object
    xil_zlib* xlz;
    xlz = new xil_zlib(single_bin, 0, compress_block_size, input_size);

    // For compression m_bin_flow = 0
    xlz->m_bin_flow = 0;

    //printf("block size in kB\t:%d\n",compress_block_size);

    std::cout << std::fixed << std::setprecision(2) << "E2E Throughput(MB/s)\t:";

    // Call ZLIB compression
    uint32_t enbytes = xlz->compress_file(lz_compress_in, lz_compress_out, input_size, compress_block_size);

    std::cout.precision(3);
    std::cout << std::fixed << std::setprecision(2) << std::endl;
    // extract data from csv file
//    ifstream in("profile_summary.csv");
//    if(in) {
//        char str[1000];
//        double max_time = 0.0;
//        while(in) {
//            in.getline(str, 1000);
//            //zlib_top,1,0.64748,0.64748,0.64748,0.64748,
//            string s = str;
//            cout << " s= " << str << endl; 
//            std::regex self_regex("^zlib_top",
//                                  std::regex_constants::ECMAScript | std::regex_constants::icase);
//            if (std::regex_search(s, self_regex)) {
//                    std::cout << "match zlib_top" << std::endl;
//                std::regex sub_regex(",(.*),(.*),(.*),(.*),(.*),",
//                                     std::regex_constants::ECMAScript | std::regex_constants::icase);
//                std::smatch m;
//                auto pos = s.cbegin();
//                auto end = s.cend();
//                for (; std::regex_search(pos, end, m, sub_regex); pos = m.suffix().first) {
//                    std::cout << m.str(2) << std::endl;
//                    if(max_time < atof(m.str(2).c_str())) {
//                        max_time = atof(m.str(2).c_str());
//                    }
//                }  
//            }
//        }
//                    std::cout << "max time = " << max_time << std::endl;
//        std::cout << "Kernel Throughput(MB/s)\t:" << (double)input_size / max_time << std::endl;
//    }
//    in.close();
    std::cout << "Compression Rate\t:" << (double)input_size / enbytes << std::endl
              << std::fixed << std::setprecision(3) << "File Size(MB)\t\t:" << (double)input_size / 1000000 << std::endl
              << "File Name\t\t:" << lz_compress_in << std::endl;
    std::cout << "Output Location\t\t:" << lz_compress_out.c_str() << std::endl;
}
int main(int argc, char* argv[]) {
    if(argc < 2) {
        printf("Usage:\n");
        printf("<input>        : Input file\n");
        printf("<output>       : (Optional) Output file, default name is \'<input>.zlib\'\n");
        printf("<kernel.xclbin>: (Optional) xclbin file, default name is \'kernel_top.xclbin\'\n");
        return 1;
    }
    //sda::utils::CmdLineParser parser;
    //parser.addSwitch("--xclbin", "-cx", "XCLBIN", "compress");
    //parser.parse(argc, argv);
    //std::string compress_bin = parser.value("xclbin");
    std::string compress_mod = argv[1];
    char *path_buffer = const_cast<char *>(compress_mod.c_str());
//    printf("File name with extension :%s\n",basename(path_buffer));
    std::string compress_out = string(basename(path_buffer)) + ".zlib";
    std::string compress_bin = "kernel_top.xclbin";
    if(argc > 2) {
        compress_out = argv[2];
    }
    if(argc > 3) {
        compress_bin = argv[3];
    }
    Feature feature = FALCON_FCZIP;
    fc_license_init(); 
    fc_license_checkout(feature, 1);
    printf("\n"); 

    if (!compress_mod.empty()) xil_compress_top(compress_mod, compress_bin, compress_out);
    fc_license_checkin(feature);
}
